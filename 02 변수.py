# 변수와 입력
## 변수 만들기
x = 10  # x라는 이름의 '변수'에 10이라는 값을 할당한다(대입한다)
'''
* x = 10 이라고 입력하면, 10이 들어있는 변수 x가 만들어짐
* 즉, 변수이름 = 값 형식. 이렇게 하면 변수가 생성(선언)되는 동시에 값이 할당(저장)
* 변수 이름을 지을 때 일종의 규칙이 있음. (제약조건)
- 영문 문자와 숫자를 사용할 수 있음 (일반적으로 한글도 가능하긴 함)
- *** 대소문자를 구분합니다 (Apple <-> apple)은 다른 표현
- 문자로 시작해야함 (숫자부터 시작하면 안되요) 1hello (x) 1004angel (x)
- _(밑줄, 언더바)로 시작할 수 있음. _x, _y 같은 게 가능 _.
- 특수문자(+,-,*,/,$,@,&,% 등)는 사용할 수 있음 (_만 빼고.)
- 파이썬의 키워드(미리 사용을 정의한 단어들)은 사용할 수 없음 (if, for, while, and, or...)
'''
print(x)  # 10
# 변수에는 숫자만 넣을 수 있나? (x)
# 변수에는 숫자뿐만 아니라 문자열(String)도 넣을 수 있음.
y = "양평해장국"
print(y)
print(x, y) # 전체 스크립트가 실행되는 한은 변수의 값은 유지가 됨

# 실수, 정수.... <- 자료형. => 데이터가 가지고 있는 특성의 분류.
# 변수는 값을 담는 그릇, 보관함 => 변수는 자신이 가지고 있는 값에 따라 자료형이 달라짐.

# 자료형 확인하기
# * type(변수명)
print(type(x), type(y))  # <class 'int'> <class 'str'>
print(x)  # 10
x = "순대국밥"
print(x)  # 순대국밥 -> 변수에 다른 값을 새로 대입할 수 있다
print(type(x))
# ---
# int는 정수(integer), str은 문자열(string)에 따옴.
# 즉, 변수의 자료형은 변수에 어떤 값이 들어가냐에 따라 달라짐

# 할당 연산자 (대입연산자) =.
'''
* 수학에서 =(등호) 기호는 양 변(쪽)이 같다라는 뜻
* 프로그래밍 언어에서는 =는 변수(왼쪽)에 값(오른쪽)을 할당(assignment)한다는 의미
* 수학에서 등호의 역할을 하는 연산자는 ==(동등연산자). 
(R은... =을 동등연산자로 씀... 대입연산자? <-)
'''
x = "사과"    # x <- 사과
y = 1234     # y <- 1234

# 변수 여러 개를 한 번에 만드는 방법
a = 10; b = 20; c = 30 # pythonic 하지 않은 코드.
print(a, b, c)
# a, b, c = 10, 20, 30
a, b, c = 33, 66, 99  # 언팩킹. -> 갯수만 맞추면 n개의 변수에 n개의 값을 바로 대입.
print(a, b, c)  # 언팩킹 못하면 그거 파이썬 잘하는 취급 X.
x, y, z, w = 7, 14, 21, 28
print(x, y, z, w)
x = 10, 20 # 왼쪽(변수)와 오른쪽(값)의 갯수가 안 맞는다면? 1: 다수는 괜찮음.
print(x) # 튜플 -> 묶음 데이터.
# **수가 안 맞아서 언팩킹 실패**
# x, y = 10, 20, 30
# print(x, y) # 1:다수가 아니라 다수:다수로 해서 짝이 안맞으면 에러남
# x, y, z = 10, 20
# print(x, y, z)

# 변수 여러 개를 만들 때, 값이 모두 같아도 된다면?
x = y = z = 10   # z = 10 -> y = z(10) -> x = y(10)
print(x, y, z)

# 두 변수의 값을 바꾸려면?
x, y = 17, 29  # 왼쪽 오른쪽 짝만 맞으면 한 번에 가능
print(x, y)
x, y = y, x  # 파이썬은 이런 식으로, 두 변수의 위치와 값을 변환.
print(x, y)

# 빈 변수 만들기
x = None  # x라는 변수의 이름은 존재하게 하고 싶은데, 특별한 값을 넣고 싶지 않을 때
print(x)
# 파이썬에서는 None은 아무것도 없는 상태를 나타내는 자료형
# 보통 다른 언어에서는 널(Null)이라고 표현

# 변수로 계산하기 (변수는 값을 담고 있는 그릇 -> 변수들끼리의 연산)
a = 10 # a 안에는 10이 담겨져 있다
b = 25 # b 안에는 25이 담겨져 있다
print(a + b) # 35
c = a + b # c 안에는 a + b 이 담겨져 있다 -> 10 + 25 담겨져 있다
print(c)  # 35

'''
- 변수 a, b에 숫자를 할당한 뒤에 a와 b의 값을 더해서 변수 c에 할당
- 변수는 변수끼리 계산할 수 있고, 계산 결과를 다른 변수에 할당(대입)할 수 있음
'''

# 사칙연산 -> 산술연산 -> 기호들... => 산술연산자(arithmetic operator)
# -> 할당연산자(대입연산자) -> 산술할당연산자, 산술대입연산자.

a = 10
print(a) # 10
a + 20 # 대입을 안했으니까... -> 휘발. (저장 X)
print(a) # 10
# 저장은 오로지 '대입'을 통해서 이뤄진다
a = a + 20
print(a) # 30 <--- 대소문자와 더불어 가장 많이 하는 실수.
# 변수 한 개에서 값의 변화를 계속 유지하려면, 계산 결과를 다시 변수에 저장해야 함.
# 파이썬에서는 변수를 두 번 대입하지 않게 하기 위해 산술 연산 후 할당 연산자를 제공
a = 10
print(a)
a + 20 # 날아가지만...
a += 20 # 저장이 됩니다
print(a)
'''
- a에는 10이 들어있고, a+=20을 수행하면 a에는 10과 20을 더한 30이 대입.
- +=처럼 산술연산자(+,-,*,/...)들에 =을 붙이면 연산결과를 변수에 저장하는 작업
- + = <- 두 연산자 사이에 공백이 있으면 안됩니다!
# a + = 10 (x)
- a += 20, a = a+20 을 축약한 형태.
'''
a = 100
a += 20
print(a)
a -= 50
print(a)
# ....
# 한 번도 만들지 않았던 변수에 산술대입연산자를 써버리면...
# d += 10 # 없는 거에다가 산술계산을 하고, 대입을 하려하면... 오류!
# name 'd' is not defined. Did you mean: 'id'?
# java, c 배울 때 이런 식으로 산술대입연산자한다음에 뭐 배워요?
# ++, --. (1씩 증감시키는 연산자) => 파이썬엔 없음. a+=1. a-=1.
# -> 증감식 자체가 없음.

# 부호 붙이기
# 만약에 음수와 양수간의 전환을 하고 싶다?
x = -10
print(+x, -x)  # -10, 10.
print(x * 1, x * (-1))

반응

댓글










